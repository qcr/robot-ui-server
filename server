#!/usr/bin/env node

process.chdir(__dirname);

require('dotenv').config();
const fs = require('fs');
const rosnodejs = require('rosnodejs');
const { RTCVideoSource, rgbaToI420 } = require('wrtc').nonstandard;
const { MediaStream } = require('wrtc');

const addon = require('bindings')('imgmsg2rgba');

const { PeerServer } = require('peer');
const { Peer } = require('peerjs-on-node');

class Subscriber {
  static subscribers = {};

  constructor(nh, topic_name, message_type) {
    this.connections = [];
    this.topic_name = topic_name;
    this.message_type = message_type;

    this.subscriber = nh.subscribe(this.topic_name, this.message_type, (msg) => this.handle(msg));
  }

  static addConnection(conn, nh, topic_name, message_type) {
    if (!Subscriber.subscribers[topic_name]) {
      Subscriber.subscribers[topic_name] = new Subscriber(nh, topic_name, message_type);
    }
    this.subscribers[topic_name].connections.push(conn);
  }

  removeConnection(conn) {
    if (!(this.topic_name in Subscriber.subscribers)) {
      return;
    }
    
    const subscriber = Subscriber.subscribers[this.topic_name];

    subscriber.connections = subscriber.connections.filter((value) => { 
      return value !== conn;
    });
    console.log(`Removed connection (${subscriber.connections.length} remaining)`);
    if (subscriber.connections.length === 0) {
      console.log('Destroying subscriber');
      this.subscriber.shutdown();
      delete Subscriber.subscribers[this.topic_name];
    }
  }

  handle(msg) {
    this.connections.forEach(conn => conn.send(JSON.stringify(
      {
        type: 'msg',
        name: this.topic_name,
        data: msg
      }
    )));
  };
}

class VideoSubscriber extends Subscriber {
  constructor(nh, topic_name) {
    super(nh, topic_name, 'sensor_msgs/Image')

    this.source = new RTCVideoSource();
    this.track = this.source.createTrack();
    this.track.label = topic_name;
  }

  static addConnection(conn, nh, topic_name, stream) {
    if (!Subscriber.subscribers[topic_name]) {
      Subscriber.subscribers[topic_name] = new VideoSubscriber(nh, topic_name, conn.stream);
    }
    this.subscribers[topic_name].connections.push(conn);
    stream.addTrack(this.subscribers[topic_name].track);
  }

  handle(msg) {
    try {
      const rgba = addon.imgmsg2rgba(msg);

      const i420Frame = {
        width: rgba.width,
        height: rgba.height,
        data: new Uint8ClampedArray(1.5 * rgba.width * rgba.height)
      };

      rgbaToI420(rgba, i420Frame);
    
      this.source.onFrame(i420Frame);
    } catch (err) {
      console.log(err.message)
    }
  };
}

class Connection {
  constructor(connection) {
    this.connection = connection;
    this.publishers = {};
    this.stream = new MediaStream();
    this.called = false;
  }

  destroy() {
    Object.keys(this.publishers).forEach(topic_name => this.removePublisher(topic_name));
    Object.keys(Subscriber.subscribers).forEach(
      topic_name => Subscriber.subscribers[topic_name].removeConnection(this.connection)
    )
  }

  addPublisher(nh, topic_name, message_type) {
    if (this.publishers[topic_name] !== undefined) return
    this.publishers[topic_name] = nh.advertise(topic_name, message_type);
  }
  removePublisher(topic_name) {
    this.publishers[topic_name].shutdown();
    delete this.publishers[topic_name];
  }

  attachTopic(nh, topic_name, message_type) {
    Subscriber.addConnection(this.connection, nh, topic_name, message_type)
  }
  detachTopic(nh, topic_name) {
    Subscriber.subscribers[topic_name].removeConnection(this.connection);
  }
  attachStream(nh, topic_name) {
    VideoSubscriber.addConnection(this.connection, nh, topic_name, this.stream);
    this.connection.send(JSON.stringify({
      type: 'streams',
      data: this.stream.getTracks().reduce(
        (previous, current) => Object.assign(previous, { [current.label]: current.id }), {}
      )
    }));
  }
  detachStream(nh, topic_name) {
    Subscriber.subscribers[topic_name].removeConnection(this.connection);
  }
}

(async function() {
  let peer = null;

  const stream = new MediaStream(); 

  await rosnodejs.initNode('/platform');
  const nh = rosnodejs.nh;

  const local = process.argv.indexOf('--local') !== -1 && process.argv.indexOf('-l') !== -1
  const secure = true && !local;

  console.log(`Secure: ${secure}`)
  
  const host = secure ? 'platforms.qcr.ai' : 'localhost'
  const port = secure ? 443 : 9000;
  
  if (local) {
    const peerServer = PeerServer({
        port: 9000,
        proxied: true,
        debug: true
    });
    
    peerServer.on('connection', (client) => { 
        try {
            console.log(`Registered: ${client.id}`);
        } catch (err) {
            console.log(err);
        }
    });
    
    peerServer.on('disconnect', (client) => { 
        console.log(`Removed: ${client.id}`);
    });
  }
  
  function connect() {
    if (peer) {
      return;
    }
    
    console.log('Connecting')
    
    peer = new Peer(process.env.ID, { 
      host, port, path: '/', secure, token: process.env.TOKEN
    }); 

    if (peer.socket._socket) {
        peer.socket._socket.on('error', (e) => {
        console.log(e)
        });  
    }

    peer.on('open', function() {
      console.log(`Listening as: ${process.env.NAME || process.env.ID}`);
    });

    peer.on('error', function(e) {
      console.error(e.message);
      peer = null;
      setTimeout(connect, 1000);
    });

    peer.on('close', () => {
      peer = null;
      setTimeout(connect, 1000);
    });

    peer.on('connection', function(conn) {

      console.log('Connection received');
      const connection = new Connection(conn);

      conn.on('open', () => {
        console.log('Connection open');
      });
      conn.on('data', function(data){
        console.log(data);
        if (data.type === 'ping') {
          conn.send(JSON.stringify({type: 'pong'}));
        }
        if (data.type === 'advertiseTopics') {
          data.data.forEach(t => connection.addPublisher(nh, t.name, t.type));
        }
        if (data.type === 'attachTopics') {
          data.data.forEach(t => connection.attachTopic(nh, t.name, t.type));
        }
        if (data.type === 'detachTopics') {
          data.data.forEach(t => connection.detachTopic(nh, t.name, t.type));
        }
        if (data.type === 'attachStreams') {
          data.data.forEach(name => connection.attachStream(nh, name));
          if (!connection.called) {
            peer.call(conn.peer, connection.stream);
            connection.called = true;
          }
        }
        if (data.type === 'detachStreams') {
          data.data.forEach(t => connection.detachStream(nh, t.name));
        }
        if (data.type === 'msg') {
          connection.publishers[data.name].publish(data.data);
        }
      });
      conn.on('close', () => {
        connection.destroy();
        console.log('Closed');
      });
      conn.on('error', (e) => {
	console.log(`Error: ${e}`);
      });
    });
  }
  connect();
})();
